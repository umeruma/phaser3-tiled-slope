{"version":3,"file":"phaser3-scene-plugin-template.js","sources":["../src/main.js"],"sourcesContent":["import SAT from 'sat'\n\nclass SlopePhysics {\n  constructor(tilemapJson, events) {\n    this.tilemapJson = tilemapJson\n    this.events = events\n    this.shapeLayer = null\n  }\n\n  enableObjectLayer( slopeLayerName ){\n    const slopeLayerJson = this.tilemapJson.layers.find(layer => layer.type === \"objectgroup\" && layer.name === slopeLayerName)\n\n    if (!slopeLayerJson) {\n        throw new Error(`No Slope layer found with name \"${slopeLayerName}\"`)\n    }\n\n    // SAT classes\n    const Box = SAT.Box\n    const P = SAT.Polygon\n    const V = SAT.Vector\n\n    this.shapeLayerJson = slopeLayerJson\n\n    // Create polygon lists to test collision with player's body by SAT\n    this.polygons = []\n    for (const objectJson of this.shapeLayerJson.objects) {\n\n      if (objectJson.polygon) {\n        const Vector = objectJson.polygon.map(point => new V(point.x, point.y))\n\n        this.polygons.push(new P(new V(objectJson.x, objectJson.y), Vector))\n      }\n    }\n  }\n\n  collideWith(playerSprite) {\n    if (!this.shapeLayerJson) {\n        return\n    }\n    \n    const playerBody = playerSprite.body\n    playerBody.sat.polygon.pos.x = playerBody.x\n    playerBody.sat.polygon.pos.y = playerBody.y\n\n    // Log FPS\n    // console.log(this.game.loop.actualFps)\n\n    let collisionCounter = 0\n    for (const i in this.polygons) {\n      const polygon = this.polygons[i]\n      const response = new SAT.Response()\n      const collision = SAT.testPolygonPolygon(playerBody.sat.polygon, polygon, response)\n\n      if (collision) {\n        collisionCounter += 1\n        \n        const overlapV = response.overlapV.clone().scale(-1)\n\n        playerBody.position.x += overlapV.x\n        playerBody.position.y += overlapV.y\n\n        playerBody.sat.polygon.pos.x = playerBody.position.x\n        playerBody.sat.polygon.pos.y = playerBody.position.y\n\n        const velocity = new SAT.V(playerBody.velocity.x, playerBody.velocity.y)\n\n        const overlapN = response.overlapN.clone().scale(-1)\n\n        const velocityN = velocity.clone().projectN(overlapN)\n\n        const velocityT = velocity.clone().sub(velocityN)\n\n        const bounce = velocityN.clone().scale(0)\n\n        const friction = velocityT.clone().scale(1)\n\n        const newVelocity = friction.clone().add(bounce)\n\n        playerBody.velocity.x = newVelocity.x\n        playerBody.velocity.y = newVelocity.y\n      }\n    }\n    if (collisionCounter > 0) {\n      playerBody.isOnSlope = true\n    } else {\n      playerBody.isOnSlope = false\n    }\n  }\n}\n\nclass SlopePlayer {\n  constructor(sprite) {\n    this.playerSprite = sprite\n  }\n\n  enableSlopeCollider() {\n    // SAT classes\n    const Box = SAT.Box\n    const P = SAT.Polygon\n    const V = SAT.Vector\n\n    const playerBox = new Box(\n      new V(this.playerSprite.body.x, this.playerSprite.body.y),\n      this.playerSprite.body.width,\n      this.playerSprite.body.height // * 0.9\n    )\n\n    this.playerSprite.body.sat = {\n      polygon: playerBox.toPolygon()\n    }\n\n    this.playerSprite.body.isOnSlope = false\n    this.playerSprite.body.onSlope = () => {\n      return this.playerSprite.body.isOnSlope\n    }\n  }\n}\n\nexport default class ScenePluginTemplate extends Phaser.Plugins.ScenePlugin {\n  /**\n   * @param {Phaser.Scene} scene A reference to the Scene that has installed this plugin.\n   * @param {Phaser.Plugins.PluginManager} pluginManager A reference to the Plugin Manager.\n   */\n  constructor(scene, pluginManager) {\n    super(scene, pluginManager)\n\n    this.scene = scene\n\n    function jsonKey( key ) {\n      return key + '-TiledSlope'\n    }\n\n    // Tilemap Loader JSON\n    const originalTilemapLoader = this.scene.load.tilemapTiledJSON\n    this.scene.load.tilemapTiledJSON = function( key, url, xhrSettings ) {\n      const loader = originalTilemapLoader.call(this, key, url, xhrSettings)\n      this.json( jsonKey( key ), url)\n      return loader\n    }\n\n    // Tilemap Creator\n    const originalTilemapCreator = this.scene.make.tilemap\n    this.scene.make.tilemap = function( config ) {\n      const tilemap = originalTilemapCreator.call( this, config )\n      tilemap.slope = new SlopePhysics(this.scene.cache.json.get( jsonKey(config.key) ))\n      return tilemap\n    }\n\n    const originalSpriteFactory = this.scene.physics.add.sprite\n    this.scene.physics.add.sprite = function(x, y, key, frame, group) {\n      const sprite = originalSpriteFactory.call(this, x, y, key, frame, group)\n      sprite.slope = new SlopePlayer(sprite)\n      return sprite\n    }\n  }\n\n  boot() {\n    /**\n     * Scene events you can listen to:\n     *\n     * start\n     * ready\n     * preupdate\n     * update\n     * postupdate\n     * resize\n     * pause\n     * resume\n     * sleep\n     * wake\n     * transitioninit\n     * transitionstart\n     * transitioncomplete\n     * transitionout\n     * shutdown\n     * destroy\n     */\n\n    const eventEmitter = this.systems.events\n    eventEmitter.once('start', this.start, this)\n    eventEmitter.once('destroy', this.destroy, this)\n\n    // console.log('BOOT')\n  }\n\n  start() {\n    // console.log('START')\n  }\n\n  create() {\n\n  }\n\n  destroy() {\n    this.scene = undefined\n  }\n}\n"],"names":["SlopePhysics","constructor","tilemapJson","events","shapeLayer","enableObjectLayer","slopeLayerName","slopeLayerJson","this","layers","find","layer","type","name","Error","P","SAT","Polygon","V","Vector","shapeLayerJson","polygons","objects","const","objectJson","polygon","map","point","x","y","push","collideWith","playerSprite","playerBody","body","sat","pos","collisionCounter","i","response","Response","testPolygonPolygon","overlapV","clone","scale","position","velocity","overlapN","velocityN","projectN","velocityT","sub","bounce","newVelocity","add","isOnSlope","SlopePlayer","sprite","enableSlopeCollider","playerBox","Box","width","height","toPolygon","onSlope","ScenePluginTemplate","scene","pluginManager","jsonKey","key","originalTilemapLoader","load","tilemapTiledJSON","url","xhrSettings","loader","call","json","originalTilemapCreator","make","tilemap","config","slope","cache","get","originalSpriteFactory","physics","frame","group","boot","eventEmitter","systems","once","start","destroy","create","undefined","Phaser","Plugins","ScenePlugin"],"mappings":"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"}